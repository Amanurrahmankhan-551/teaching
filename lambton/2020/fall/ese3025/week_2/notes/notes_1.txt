###  Translation from RTF performed by UnRTF, version 0.21.9 
### font table contains 1 fonts total

-----------------
$ gcc -lpthread pthreads_x.c -o pthreads

When developing code for the Beaglebone, since we are not running a sophisticated on the Beaglebone, things are a little more "manual":

we have a few option:

1) develop the code entirely on the Beaglebone (use nano or gedit if you have a GUI and hdmi screen)

2) partial cross toolchain: write the code on the host machine using an IDE, then potentially cross compile/build code for Beaglebone on the host. Finally, you sftp the executable to the Beaglebone
 *** another variation: you write the code on the host machine using an IDE, then you compose a Makefile to build the application. The you sftp the source files, headers, etc., as well as
the Makefile to the Beaglebone

3) full cross toolchain: we are developing, cross compiling, cross linking and cross debugging the code on the host machine with the Beaglebone "in the loop" (analogous to the MCUXpresso environment on your desktop when connected to the LPC1769)

If Beaglebone is new to you, please watch my videos on it in the "instructional" sub-directory of the teaching repository;

for the third video, please note:
1) if you want the GUI, please don't flash the onboard eMMC (4Gb of flash) with that distribution; instead, use an external micro-SD card to hold the OS
2) for your onboard flash, please only use the "IoT" or non-gui version of the Debian distribution

get yourself three 32-Gb or larger micro-SD cards (you need a minimum of 4Gb for each of these):
1) create a flasher image with one
2) with another, put the GUI-based Debian on it or perhaps another OS for the Beaglebone (e.g., a Yocto build of your own making)
3) a mass storage device when you are using the on-board flash OS

